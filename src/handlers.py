from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode

from config import TRIGGER_WORDS, ADMINS
from states import UserState
from keyboards import get_period_keyboard, get_feedback_keyboard
from database import save_user, update_user_period, get_stats, get_period_stats, increment_question_count, get_user_data
from utils import ask_deepseek

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.set_state(UserState.name)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –ú–∏–ª–∞ - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤–æ –≤—Ä–µ–º—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞.\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(UserState.name)
async def process_name(message: Message, state: FSMContext, pool):
    name = message.text
    await state.update_data(name=name)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with pool.acquire() as conn:
        await save_user(conn, message.from_user.id, message.from_user.username, message.from_user.full_name, name)
    
    await state.set_state(UserState.period)
    await message.answer(
        f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! ü§ó\n\n"
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–µ–π—á–∞—Å –ø–µ—Ä–∏–æ–¥?",
        reply_markup=get_period_keyboard()
    )

period_texts = {
    "–ì–æ—Ç–æ–≤–ª—é—Å—å": "–°–µ–π—á–∞—Å —Å–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∏ —É–∑–Ω–∞—Ç—å –≤—Å—ë –æ –±—É–¥—É—â–∏—Ö –º–µ—Å—è—Ü–∞—Ö. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏, —Å–æ–≤–µ—Ç—ã, –æ—Ç–≤–µ—Ç—ã –≤—Ä–∞—á–µ–π –≤—Å–µ —Ä—è–¥–æ–º!",
    "–ë–µ—Ä–µ–º–µ–Ω–Ω–∞": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å —ç—Ç–∏–º —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ–º! –ü–æ–¥–¥–µ—Ä–∂—É –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ, –ø–æ–¥—Å–∫–∞–∂—É –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –æ—Ç–∫—Ä–æ—é –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ–≥—É –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏.",
    "–†–µ–±–µ–Ω–∫—É –º–µ–Ω—å—à–µ –≥–æ–¥–∞": "–ü–µ—Ä–≤—ã–π –≥–æ–¥ ‚Äî –≤—Ä–µ–º—è —Ä–∞–¥–æ—Å—Ç–∏, –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –∑–∞–±–æ—Ç. –°–æ –º–Ω–æ–π —Ç—ã –Ω–∞–π–¥—ë—à—å –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, —Ä–∞–∑–≤–∏—Ç–∏—é –º–∞–ª—ã—à–∞ –∏ —Å–µ–±–µ.",
    "–†–µ–±–µ–Ω–∫—É 2-3 –≥–æ–¥–∞": "–í–æ–∑—Ä–∞—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏–π –∏ –ø—Ä–æ–± ‚Äî —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –≤–æ—Å–ø–∏—Ç–∞–Ω–∏–∏, –∏–≥—Ä–∞—Ö, —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–µ—á–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –º–∞–º—ã. –¢—ã –Ω–µ –æ–¥–Ω–∞ ‚Äî —Ç—É—Ç —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–æ–µ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ.",
    "–†–µ–±–µ–Ω–∫—É 3+ –≥–æ–¥–∞": "–î–ª—è —Å–µ–º—å–∏ —Å –¥–æ—à–∫–æ–ª—å–Ω–∏–∫–æ–º –∑–¥–µ—Å—å –µ—Å—Ç—å –∏–¥–µ–∏, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é, –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –≤ —Å–∞–¥—É –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —à–∫–æ–ª–µ ‚Äî –∑–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.",
    "–Ø - –ø–∞–ø–∞": "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –ë–æ—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π ‚Äî –º—É–∂—á–∏–Ω—ã —Ç–æ–∂–µ –Ω–∞—Ö–æ–¥—è—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–≤–µ—Ç—ã –¥–ª—è —Å–µ–±—è –∏ —Å–µ–º—å–∏."
}

@router.message(UserState.period)
async def process_period(message: Message, state: FSMContext, pool):
    period = message.text
    await state.update_data(period=period)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with pool.acquire() as conn:
        await update_user_period(conn, message.from_user.id, period)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞
    if period in period_texts:
        await message.answer(period_texts[period], reply_markup=ReplyKeyboardRemove())
    
    await state.set_state(UserState.main)
    # await message.answer(
    #     "–ß—Ç–æ —è —É–º–µ—é:\n"
    #     "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–µ–±—è –≤–æ –≤—Ä–µ–º—è –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –º–∞—Ç–µ—Ä–∏–Ω—Å—Ç–≤–∞\n"
    #     "‚Ä¢ –î–∞–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–±–µ–∑ –¥–∏–∞–≥–Ω–æ–∑–æ–≤)\n"
    #     "‚Ä¢ –ü–æ–¥—Å–∫–∞–∑—ã–≤–∞—Ç—å, –≥–¥–µ –∏—Å–∫–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
    #     "‚Ä¢ –î–µ–ª–∞—Ç—å —Ç–µ–±–µ —á—É—Ç—å –ª–µ–≥—á–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å üíï\n\n"
    #     "–ß–µ–≥–æ —è –Ω–µ –¥–µ–ª–∞—é:\n"
    #     "üö´ –ù–µ —Å—Ç–∞–≤–ª—é –¥–∏–∞–≥–Ω–æ–∑—ã\n"
    #     "üö´ –ù–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞\n"
    #     "üö´ –ù–µ –¥–∞—é –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è\n\n"
    #     "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!",
    #     reply_markup=ReplyKeyboardRemove()
    # )


@router.message(Command("stats"))
async def cmd_stats(message: Message, pool):
    if message.from_user.id not in ADMINS:
        return

    async with pool.acquire() as conn:
        user_count, question_count = await get_stats(conn)  # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –¥–≤–∞ –∑–Ω–∞—á–µ–Ω–∏—è
        period_stats = await get_period_stats(conn)

    stats_text = [
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:",
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}",
        f"–ó–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {question_count}",
        "",
        "üìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º:"
    ]
    
    for stat in period_stats:
        stats_text.append(f"‚Ä¢ {stat['period']}: {stat['user_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, {stat['total_questions']} –≤–æ–ø—Ä–æ—Å–æ–≤")

    await message.answer("\n".join(stats_text))
    
    
@router.message(UserState.main)
async def process_main(message: Message, state: FSMContext, pool, bot: Bot):
    user_data = await state.get_data()
    user_text = message.text
    
    if any(trigger in user_text.lower() for trigger in TRIGGER_WORDS):
        await message.answer(
            "üö® –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏ —Ç–∞–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å.\n\n"
            "–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    async with pool.acquire() as conn:
        await increment_question_count(conn, message.from_user.id)
        user_question_count = await conn.fetchval(
            "SELECT question_count FROM users WHERE user_id = $1",
            message.from_user.id
        )
    
    gpt_response = await ask_deepseek(user_text, user_data.get('name', ''), user_data.get('period', ''))
    
    if gpt_response is None:
        await message.answer(
            "üö® –í–ù–ò–ú–ê–ù–ò–ï! –ü—Ä–∏ —Ç–∞–∫–∏—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –≤—Ä–∞—á—É –∏–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å.\n\n"
            "–≠—Ç–æ –Ω–µ –≤–æ–ø—Ä–æ—Å –¥–ª—è —á–∞—Ç-–±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Ç–µ—Ä—è–π—Ç–µ –≤—Ä–µ–º—è - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await state.update_data(
            last_question=user_text,
            last_answer=gpt_response
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ—Å–ª–µ 1, 3 –∏ 30 –æ—Ç–≤–µ—Ç–æ–≤
        show_feedback = user_question_count in [1, 3, 30]
        
        await message.answer(
            gpt_response + "\n\n‚ö†Ô∏è –í–∞–∂–Ω–æ! –Ø –Ω–µ –∑–∞–º–µ–Ω—è—é –≤—Ä–∞—á–∞. –ü—Ä–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–∞—Ö –æ–±—Ä–∞—â–∞–π—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
            reply_markup=get_feedback_keyboard() if show_feedback else None
        )
        
        for admin_id in ADMINS:
            await bot.send_message(
                admin_id,
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({user_data.get('period')}) {message.from_user.full_name} (@{message.from_user.username}) —Å–ø—Ä–æ—Å–∏–ª:\n"
                f"{user_text}\n\n"
                f"–û—Ç–≤–µ—Ç: {gpt_response}\n"
                f"–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_question_count}"  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤
            )


@router.callback_query(F.data == "feedback")
async def feedback_callback(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UserState.waiting_feedback)
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    await callback.message.edit_reply_markup(reply_markup=None)
    
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")

@router.message(UserState.waiting_feedback)
async def process_feedback(message: Message, state: FSMContext, bot: Bot):
    feedback_text = message.text
    data = await state.get_data()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    for admin_id in ADMINS:
        await bot.send_message(
            admin_id,
            f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({data.get('period')}) {message.from_user.full_name} (@{message.from_user.username}):\n\n"
            f"–í–æ–ø—Ä–æ—Å: {data['last_question']}\n\n"
            f"–û—Ç–≤–µ—Ç: {data['last_answer']}\n\n"
            f"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: {feedback_text}"
        )
    
    await state.set_state(UserState.main)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! üíï")
    
@router.message()
async def handle_unregistered_user(message: Message, state: FSMContext, pool, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
    async with pool.acquire() as conn:
        user = await get_user_data(conn, message.from_user.id)
    
    if user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(UserState.main)
        await state.update_data(
            name=user['name'],
            period=user['period']
        )
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
        await process_main(message, state, pool, bot)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –Ω–∞—á–∞—Ç—å —Å /start
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
            reply_markup=ReplyKeyboardRemove()
        )